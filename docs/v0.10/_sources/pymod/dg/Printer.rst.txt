.. _py-dg/Printer:

**********************************************************
dg/Printer
**********************************************************
.. default-domain:: py

.. py:currentmodule:: mod
.. cpp:namespace:: mod


Class ``DGPrintData``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: DGPrintData

    This class is used to hold extra data about how a specific derivation graph
    is visualised.

    .. py:method:: __init__(self, dg)

        :param DG dg: the derivation graph to hold data for.
    .. py:attribute:: dg

        (Read-only) The derivation graph the object holds data for.
    .. py:method:: makeDuplicate(e, eDup)

        Create another version of the given derivation and give it the given duplicate number.

        :param DGHyperEdge e: a reference to the derivation to duplicate.
        :param int eDup: the duplicate number for the new version of the derivation.
    .. py:method:: removeDuplicate(e, eDup)

        Remove the version of the given derivation with the given duplicate number.

        :param DGHyperEdge e: a reference to the derivation to duplicate.
        :param int eDup: the duplicate number for the version of the derivation to remove.
    .. py:method:: reconnectTail(e, eDup, g, vDupTar)

        Reconnect an arbitrary version of the tail specified by the given graph in the derivation duplicate given.

        :param DGHyperEdge e: a reference to the derivation to reconnect.
        :param int eDup: the duplicate number of the derivation to reconnect.
        :param Graph g: a graph representing the tail vertex to reconnect.
        :param int vDupTar: the new duplicate number for the tail vertex.
    .. py:method:: reconnectHead(e, eDup, g, vDupTar)

        Reconnect an arbitrary version of the head specified by the given graph in the derivation duplicate given.

        :param DGHyperEdge e: a reference to the derivation to reconnect.
        :param int eDup: the duplicate number of the derivation to reconnect.
        :param Graph g: a graph representing the head vertex to reconnect.
        :param int vDupTar: the new duplicate number for the tail vertex.

Class ``DGPrinter``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: DGPrinter

    This class is used to configure how derivation graphs are visualised,
    how much is visualised and which extra properties are printed.

    .. py:attribute:: graphPrinter

        (Read-only) Retrieve the :class:`GraphPrinter` used when printing images of graphs.

        :type: GraphPrinter
    .. py:attribute:: withShortcutEdges

        Control whether or not hyperedges :math:`(T, H)` with :math:`|T| = |H| = 1`
        are printed as a simple arrow without the usual rectangle.

        :type: bool
    .. py:attribute:: withGraphImages

        Control whether or not each vertex is printed with a image of its graph in it.

        :type: bool
    .. py:attribute:: labelsAsLatexMath

        Control whether or not labels on vertices and hyperedges are put inline :math:`\LaTeX` math.
        Specifically, a label ``label`` is written as ``$\mathrm{label'}$``, with ``label'`` being
        ``label`` with all space characters escaped.

        :type: bool
    .. py:method:: pushVertexVisible(f)

        Add another function controlling the visibility of vertices.
        All visibility functions must return ``true`` for a vertex to be visible.

        :param f: the function to push for specifying vertex visibility.
        :type f: Callable[[Graph, DG], bool]
    .. py:method:: popVertexVisible()

        Remove the last pushed vertex visibility function.
    .. py:method:: pushEdgeVisible(f)

        Add another function controlling the visibility of hyperedges.
        All visibility functions must return ``true`` for a hyperedge to be visible.

        :param f: the function to push for specifying hyperedge visibility.
        :type f: Callable[[DGHyperEdge], bool]
    .. py:method:: popEdgeVisible()

        Remove the last pushed hyperedge visibility function.
    .. py:attribute:: withShortcutEdgesAfterVisibility

        Control whether or not hyperedges are depicted as simple arrows when all but 1 head and tail are hidden.

        :type: bool
    .. py:attribute:: vertexLabelSep

        The string used as separator between each part of each vertex label.

        :type: str
    .. py:attribute:: edgeLabelSep

        The string used as separator between each part of each edge label.

        :type: str
    .. py:method:: pushVertexLabel(f)

        Add another function for vertex labelling. The result of this function is added to the end of each label.

        :param f: the function to push for labelling vertices.
        :type f: Callable[[Graph, DG], str]
    .. py:method:: popVertexLabel()

        Remove the last pushed vertex labelling function.
    .. py:method:: pushEdgeLabel(f)

        Add another function for edge labelling. The result of this function is appended to each label.

        :param f: the function to push for labelling edges.
        :type f: Callable[[DGHyperEdge], str]
    .. py:method:: popEdgeLabel()

        Remove the last pushed edge labelling function.
    .. py:attribute:: withGraphName

        Control whether or not graph names are appended to the vertex labels (see also :meth:`DGPrinter.pushVertexLabel`).

        :type: bool
    .. py:attribute:: withRuleName

        Control whether or not rule names are appended to the edge labels (see also :meth:`DGPrinter.pushEdgeLabel`).

        :type: bool
    .. py:attribute:: withRuleId

        Control whether or not rule IDs are appended to the edge labels (see also :meth:`DGPrinter.pushEdgeLabel`).

        :type: bool
    .. py:attribute:: withInlineGraphs

        Control whether or not graph depictions should be precompiled, or be included inline in the DG figure.

        :type: bool
    .. py:method:: pushVertexColour(f, extendToEdges=True)

        Add another function for colouring vertices. The final colour of a vertex is the result of the first colour function returning a non-empty string.
        The functions are evaluated in the order they are pushed and the resulting string is used directly as a colour in Tikz.
        A hyperedge is also coloured if at least one head and one tail *can* be coloured with a colour for which ``extendToEdges`` is ``True``.
        In this case, the hyperedge (and a subset of the head and tail connectors) is coloured with the first applicable colour.
        The edge extension of vertex colour takes lower precedence than explicitly added hyperedge colouring functions.

        :param f: the function to push for colouring vertices.
        :type f: Callable[[Graph, DG], str]
        :param bool extendToEdges: whether or not some hyperedges are coloured as well (see above).
    .. py:method:: popVertexColour()

        Remove the last pushed vertex colouring function.
    .. py:method:: pushEdgeColour(f)

        Add another function for colouring hyperedges. The final colour of a hyperedge (and all of its head and tail connectors) is the result of the
        first colour function returning a non-empty string.
        
        :param f: the function to push for colouring hyperedges.
        :type f: Callable[[DGHyperEdge], str]
    .. py:method:: popEdgeColour()

        Remove the last pushed hyperedge colouring function.
    .. py:method:: setRotationOverwrite(f)

        Overwrite the rotation set in the nested :py:class:`GraphPrinter`. The given function will be used
        to set the rotation of each printed graph.

        :param f: the function called on each graph to retrieve the rotation to render it with.
        :type f: Callable[[GraphPrinter], int]
    .. py:method:: setMirrorOverwrite(f)

        Overwrite the mirror set in the nested :py:class:`GraphPrinter`. The given function will be used
        to set the mirror of each printed graph.

        :param f: the function called on each graph to retrieve the mirror to render it with.
        :type f: Callable[[GraphPrinter], bool]
