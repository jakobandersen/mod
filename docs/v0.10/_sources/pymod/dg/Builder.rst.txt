.. _py-dg/Builder:

**********************************************************
dg/Builder
**********************************************************
.. default-domain:: py

.. py:currentmodule:: mod
.. cpp:namespace:: mod


Class ``DGBuilder``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: DGBuilder

    An RAII-style object obtained from :py:meth:`DG.build`.
    On destruction of an active builder object the owning :py:class:`DG` will be locked
    for further modifications.

    The object can be used as a context manager:

    .. code-block:: python

        dg = DG()
        with dg.build() as b:
            # b is a DGBuilder
        # b has now been destructed and dg is locked.

    Otherwise one can manually use ``del`` on the obtained builder to trigger the destruction.

    .. py:method:: addDerivation(d, graphPolicy=IsomorphismPolicy.Check)

        Adds a hyperedge corresponding to the given derivation to the associated :class:`DG`.
        If it already exists, only add the given rules to the edge.

        :param Derivations d: a derivation to add a hyperedge for.
        :param IsomorphismPolicy graphPolicy: the isomorphism policy for adding the given graphs.
        :returns: the hyperedge corresponding to the given derivation.
        :rtype: DGHyperEdge
        :raises: :class:`LogicError` if ``d.left`` is empty.
        :raises: :class:`LogicError` if ``d.right`` is empty.
        :raises: :class:`LogicError` if ``graphPolicy == IsomorphismPolicy.Check`` and a given graph object
            is different but isomorphic to another given graph object or to a graph object already
            in the internal graph database in the associated derivation graph.
    .. py:method:: execute(strategy, *, verbosity=2, ignoreRuleLabelTypes=False)

        Execute the given strategy (:ref:`dgStrat`) and as a side-effect add
        vertices and hyperedges to the underlying derivation graph.

        :param DGStrat strategy: the strategy to execute.
        :param int verbosity: the level of verbosity of printed information during calculation.
            See :cpp:func:`dg::Builder::execute` for explanations of the levels.
        :param bool ignoreRuleLabelTypes: whether rules in the strategy should be checked beforehand for
            whether they have an associated :class:`LabelType` which matches the one in the underlying derivation graph.
        :returns: a proxy object for accessing the result of the exeuction.
        :rtype: DGExecuteResult
        :throws: :class:`LogicError` if a static "add" strategy has :attr:`IsomorphismPolicy.Check` as graph policy,
            and it tries to add a graph object isomorphic to an already known, but different, graph object in the database.
            This is checked before execution, so there is strong exception guarantee.
        :throws: :class:`LogicError` if a dynamic "add" strategy has :attr:`IsomorphismPolicy.Check` as graph policy,
            and it tries to add a graph object isomorphic to an already known, but different, graph object in the database.

            .. warning:: This is checked during execution, so while the basic exception guarantee is provided,
                there may be modifications to the underlying derivation graph.
        :throws: :class:`LogicError`: if ``ignoreRuleLabelTypes`` is ``False``, which is the default,
            and a rule in the given strategy has an associated :class:`LabelType` which is different from the one
            in the derivation graph.
    .. py:method:: addAbstract(description)

        Add vertices and hyperedges based on the given abstract description.
        The description must adhere to the grammar described at :ref:`dg_abstract-desc`.

        For each vertex named in the description a graph object with no vertices will be created,
        and its name set to the given identifier.

        :param str description: the description to parse into abstract derivations.
        :raises: :class:`InputError` if the description could not be parsed.

Class ``DGExecuteResult``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: DGExecuteResult

    The result from calling :func:`DGBuilder.execute`.

    .. py:attribute:: subset
                      universe

        (Read-only) Respectively the subset and the universe computed
        by the strategy execution (see also :ref:`dgStrat`).

        :type: list[Graph]
    .. method:: list(*, withUniverse=False)

        Output information from the execution of the strategy.

        :param bool withUniverse: The universe lists can be rather long. As default they are omitted when listing.
