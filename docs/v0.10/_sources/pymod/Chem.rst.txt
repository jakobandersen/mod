.. _py-Chem:

**********************************************************
Chem
**********************************************************
.. default-domain:: py

.. py:currentmodule:: mod
.. cpp:namespace:: mod


Class ``AtomId``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: AtomId

    Representation of the chemical element of an atom.

    .. py:method:: __init__(self)

        Construct an :py:const:`AtomIds.Invalid` atom id.
    .. py:method:: __init__(self, id)

        Construct a specific atom id. Pre-condition: the id must be at most that of :py:const:`AtomIds.Max`.
    .. py:attribute:: symbol

        (Read-only) The symbol represented by the atom id.

        :type: str
        :raises: :py:class:`LogicError` if the id is invalid.
    .. py:method:: __int__(self)

        Implicit conversion to an integer type.

Class ``Isotope``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: Isotope

    Representation of the isotope of an atom.

    .. py:method:: __init__(self)

        Construct a representation of the most abundant isotope.
    
        .. note:: This is different from explicitly specifying the isotope that is the most abundant one.
    .. py:method:: __init__(self, i)

        Construct a specific isotope. Pre-condition: the isotope must either be at least 1 or be -1.
        Passing -1 is equivalent to default-construction.
    .. py:method:: __init__(self)

        Implicit conversion to an integer type.

Class ``Charge``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: Charge

    Representation of the charge of an atom.

    .. py:method:: __init__(self)

        Construct a neutral charge.
    .. py:method:: __init__(self, c)

        Construct a specific charge. Pre-condition: the charge must be in the range :math:`[-9, 9]`.
    .. py:method:: __init__(self)

        Implicit conversion to an integer type.

Class ``AtomData``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: AtomData

    Representation of basic data of an atom.

    .. py:method:: __init__(self)

        Construct atom data with default values:

        - :cpp:var:`AtomIds::Invalid` atom id,
        - :cpp:expr:`Isotope()` as isotope,
        - neutral charge, and
        - no radical.
    .. py:method:: __init__(self, atomId)

        Construct atom data the given atom id, and otherwise default values (see above).
    .. py:method:: __init__(self, atomId, charge)

        Construct atom data with given atom id, charge, and radical, but with default isotope.
    .. py:method:: __init__(self, atomId, charge)

        Construct atom data with given atom id, isotope, charge, and radical.
    .. py:attribute: atomId

        (Read-only) The atom id.

        :type: AtomId
    .. py:attribute: isotope

        (Read-only) The isotope.

        :type: Isotope
    .. py:attribute:: charge

        (Read-only) The charge.

        :type: Charge
    .. py::attribute:: radical

        (Read-only) The radical.

        :type: bool
    .. py::method:: __str__(self)

        :returns: A string representation of the atom data adhering to the string encoding of atoms (see :ref:`mol-enc`).
        :raises: :py::class:`LogicError` if the atom id is :py:const:`AtomIds.Invalid`.

Class ``BondType``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: BondType

    Representation of a bond type.

    .. py:attribute:: Invalid
    .. py:attribute:: Single
    .. py:attribute:: Aromatic
    .. py:attribute:: Double
    .. py:attribute:: Triple
    .. py:method:: __str__(self)

        :returns: A string representation of the bond type adhering to the string encoding of bonds (see :ref:`mol-enc`).
        :raises: :py:class:`LogicError` if the bond type is :py:const:`Invalid`.

Class ``AtomIds``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: AtomIds

    This class contains constants for each chemical element, both as their abbreviations and their full names.
    Two additional constants are provided for convenience.

    .. py:attribute:: Invalid

        Constant for the invalid atom id.

        :type: AtomId

    .. py:attribute:: Max

        An atom id equal to the atom id with the maximum valid id.

        :type: AtomId

