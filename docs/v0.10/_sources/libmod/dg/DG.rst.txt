.. _cpp-dg/DG:

**********************************************************
dg/DG.hpp
**********************************************************
.. default-domain:: cpp
.. default-role:: cpp:expr

.. py:currentmodule:: mod
.. cpp:namespace:: mod


Class ``dg::DG``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: dg::DG
    

    The derivation graph class. A derivation graph is a directed multi-hypergraph
    :math:`\mathcal{H} = (V, E)`. Each hyperedge :math:`e\in E` is thus an ordered pair
    :math:`(e^+, e^-)` of multisets of vertices, the sources and the targets.
    Each vertex is annotated with a graph, and each hyperedge is annotated with list of transformation rules.
    A derivation graph is constructed incrementally using a :cpp:class:`Builder` obtained from the :cpp:func:`build()`
    function. When the obtained builder is destructed the derivation graph becomes locked and can no longer be modified.


Synopsis
^^^^^^^^

.. code-block:: c++
    
    struct MOD_DECL DG {
        DG(const DG &) = delete;
        DG &operator=(const DG &) = delete;
    public:
        class Vertex;
        class HyperEdge;
        class VertexIterator;
        class VertexRange;
        class EdgeIterator;
        class EdgeRange;
        class InEdgeIterator;
        class InEdgeRange;
        class OutEdgeIterator;
        class OutEdgeRange;
        class SourceIterator;
        class SourceRange;
        class TargetIterator;
        class TargetRange;
        class RuleIterator;
        class RuleRange;
    private:
        DG(std::unique_ptr<lib::DG::NonHyper> dg);
    public:
        ~DG();
        std::size_t getId() const;
        MOD_DECL friend std::ostream &operator<<(std::ostream &s, const DG &dg);
        const lib::DG::NonHyper &getNonHyper() const;
        const lib::DG::Hyper &getHyper() const;
        LabelSettings getLabelSettings() const;
    public: // object state
        bool hasActiveBuilder() const;
        bool isLocked() const;
    public: // hypergraph interface
        std::size_t numVertices() const;
        VertexRange vertices() const;
        std::size_t numEdges() const;
        EdgeRange edges() const;
    public: // searching for vertices and hyperedges
        Vertex findVertex(std::shared_ptr<graph::Graph> g) const;
        HyperEdge findEdge(const std::vector<Vertex> &sources, const std::vector<Vertex> &targets) const;
        HyperEdge findEdge(const std::vector<std::shared_ptr<graph::Graph> > &sources,
                           const std::vector<std::shared_ptr<graph::Graph> > &targets) const;
    public:
        Builder build();
        const std::vector<std::shared_ptr<graph::Graph>> &getGraphDatabase() const;
        const std::vector<std::shared_ptr<graph::Graph> > &getProducts() const;
        std::pair<std::string, std::string> print(const PrintData &data, const Printer &printer) const;
        std::string dump() const;
        void listStats() const;
    private:
        struct Pimpl;
        std::unique_ptr<Pimpl> p;
    public:
        static std::shared_ptr<DG> make(LabelSettings labelSettings,
                                        const std::vector<std::shared_ptr<graph::Graph> > &graphDatabase,
                                        IsomorphismPolicy graphPolicy);
        static std::shared_ptr<DG> dumpImport(const std::vector<std::shared_ptr<graph::Graph> > &graphs,
                                              const std::vector<std::shared_ptr<rule::Rule> > &rules,
                                              const std::string &file);
        static void diff(std::shared_ptr<DG> dg1, std::shared_ptr<DG> dg2);
    };

Details
^^^^^^^

.. cpp:namespace-push:: dg::DG

.. function:: std::size_t getId() const

    :returns: the instance identifier for the object.
.. function:: friend std::ostream &operator<<(std::ostream &s, const DG &dg)
.. function:: const lib::DG::NonHyper &getNonHyper() const
              const lib::DG::Hyper &getHyper() const

    :returns: the internal data structures of the derivation graph.
.. function:: LabelSettings getLabelSettings() const

    :returns: the label settings for the derivation graph.
.. function:: bool hasActiveBuilder() const

    :returns: whether :cpp:func:`build` has been called and the returned :cpp:class:`Builder` is still active.
.. function:: bool isLocked() const

    :returns: whether the derivation graph is locked or not.
.. function:: std::size_t numVertices() const

    :returns: the number of vertices in the derivation graph.
    :throws: :class:`LogicError` if not `hasActiveBuilder()` or `isLocked()`.
.. function:: VertexRange vertices() const

    :returns: a range of all vertices in the derivation graph.
    :throws: :class:`LogicError` if not `hasActiveBuilder()` or `isLocked()`.
.. function:: std::size_t numEdges() const

    :returns: the number of edges in the derivation graph.
    :throws: :class:`LogicError` if not `hasActiveBuilder()` or `isLocked()`.
.. function:: EdgeRange edges() const

    :returns: a range of all edges in the derivation graph.
    :throws: :class:`LogicError` if not `hasActiveBuilder()` or `isLocked()`.
.. function:: Vertex findVertex(std::shared_ptr<graph::Graph> g) const

    :returns: a vertex descriptor for which the given graph is associated,
        or a null descriptor if no such vertex exists.
    :throws: :class:`LogicError` if not `hasActiveBuilder()` or `isLocked()`.
.. function:: HyperEdge findEdge(const std::vector<Vertex> &sources, const std::vector<Vertex> &targets) const
              HyperEdge findEdge(const std::vector<std::shared_ptr<graph::Graph> > &sources, const std::vector<std::shared_ptr<graph::Graph> > &targets) const

    :returns: a hyperedge with the given sources and targets.
        If no such hyperedge exists in the derivation graph then a null edge is returned.
        In the second version, the graphs are put through :func:`findVertex` first.
    :throws: :class:`LogicError` if a vertex descriptor is null, or does not belong to the derivation graph.
    :throws: :class:`LogicError` if not `hasActiveBuilder()` or `isLocked()`.
.. function:: Builder build()

    :returns: an RAII-style move-only object which can be used to construct the derivation graph.
        Only one of these objects can be active at the same time, and on destruction an active builder object
        will lock the associated DG object for further modification.
    :throws: :cpp:class:`LogicError` if `hasActiveBuilder()`.
    :throws: :cpp:class:`LogicError` if `isLocked()`.
.. function:: const std::vector<std::shared_ptr<graph::Graph>> &getGraphDatabase() const

    :returns: a list of all graphs created by the derivation graph,
        and all graphs given when constructed.
.. function:: const std::vector<std::shared_ptr<graph::Graph> > &getProducts() const

    :returns: the list of new graphs discovered by the derivation graph.
.. function:: std::pair<std::string, std::string> print(const PrintData &data, const Printer &printer) const

    Print the derivation graph in style of a hypergraph.

    :returns: the name of the PDF-file that will be compiled in post-processing and the name of the coordinate tex-file used.
    :throws: :class:`LogicError` if the print data is not for this DG.
.. function:: std::string dump() const

    Exports the derivation graph to a text file, which can be importetet.

    :returns: the name of the file with the exported data.
    :throws: :class:`LogicError` if the DG has not been calculated.
.. function:: void listStats() const

    Output various stats of the derivation graph.

    :throws: :class:`LogicError` if the DG has not been calculated.
.. function:: static std::shared_ptr<DG> make(LabelSettings labelSettings, \
                                             const std::vector<std::shared_ptr<graph::Graph> > &graphDatabase, \
                                             IsomorphismPolicy graphPolicy)

    Create an empty unlocked derivation graph object.

    The given :cpp:class:`LabelSettings` defines which category the derivation graph object works in.
    All morphism calculations (monomorphism and isomorphism) are thus defined by the :cpp:enum:`LabelType`,
    while the :cpp:enum:`LabelRelation` is used for for monomorphism enumeration.

    The graphs is the given :cpp:var:`graphDatabase` are used as the initial graph database.
    Any subsequently added or constructed graph for this object
    will be checked for isomorphism against the graph database.

    The given :cpp:var:`graphPolicy` refers to how the graphs of :cpp:var:`graphDatabase` are checked for
    isomorphism against each other initially. Only use :cpp:enumerator:`IsomorphismPolicy::TrustMe` if you are
    absolutely sure that the graphs are unique up to isomorphism.

    :throws: :class:`LogicError` if `graphPolicy == IsomorphismPolicy::Check` and two graph objects
        in :cpp:any:`graphDatabase` are different objects but represents isomorphic graphs.
.. function:: static std::shared_ptr<DG> dumpImport(const std::vector<std::shared_ptr<graph::Graph> > &graphs, const std::vector<std::shared_ptr<rule::Rule> > &rules, const std::string &file)

        Load a derivation graph dump. Any graph in the dump which is isomorphic to a given graph is replaced by the given graph.
        The same procedure is done for the rules, however only using the name of the rule for comparison.

        :throws: :class:`InputError` on bad input.
.. function:: static void diff(std::shared_ptr<DG> dg1, std::shared_ptr<DG> dg2)

        Compare two derivation graphs and lists the difference.
        This is not a general isomorphism check; two vertices are equal if they have
        the same graph attached. Edges are equal if the head and tail sets are equal
        and if the attached rule is the same.

.. cpp:namespace-pop::

