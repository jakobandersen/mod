.. _cpp-dg/Printer:

**********************************************************
dg/Printer.hpp
**********************************************************
.. default-domain:: cpp
.. default-role:: cpp:expr

.. py:currentmodule:: mod
.. cpp:namespace:: mod


Class ``dg::PrintData``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: dg::PrintData
    

    This class is used to hold extra data about how a specific derivation graph
    is visualised.


Synopsis
^^^^^^^^

.. code-block:: c++
    
    struct MOD_DECL PrintData {
        PrintData(std::shared_ptr<DG> dg);
        PrintData(const PrintData &other);
        PrintData(PrintData &&other);
        ~PrintData();
        lib::IO::DG::Write::Data &getData();
        lib::IO::DG::Write::Data &getData() const;
        std::shared_ptr<DG> getDG() const;
        void makeDuplicate(DG::HyperEdge e, unsigned int eDup);
        void removeDuplicate(DG::HyperEdge e, unsigned int eDup);
        void reconnectTail(DG::HyperEdge e, unsigned int eDup, std::shared_ptr<graph::Graph> g, unsigned int vDupTar); // TODO: make overload with explicit source
        void reconnectHead(DG::HyperEdge e, unsigned int eDup, std::shared_ptr<graph::Graph> g, unsigned int vDupTar); // TODO: make overload with explicit source
    private:
        std::shared_ptr<DG> dg;
        std::unique_ptr<lib::IO::DG::Write::Data> data;
    };

Details
^^^^^^^

.. cpp:namespace-push:: dg::PrintData

.. function:: PrintData(std::shared_ptr<DG> dg)

    Construct a data object where all derivations have a single version, 0, connected to version 0 of all heads and tails.
.. function:: std::shared_ptr<DG> getDG() const

    :returns: the derivation graph the object holds data for.
.. function:: void makeDuplicate(DG::HyperEdge e, unsigned int eDup)

    Create another version of the given derivation and give it the given duplicate number.
.. function:: void removeDuplicate(DG::HyperEdge e, unsigned int eDup)

    Remove the version of the given derivation with the given duplicate number.
.. function:: void reconnectTail(DG::HyperEdge e, unsigned int eDup, std::shared_ptr<graph::Graph> g, unsigned int vDupTar)

    Reconnect an arbitrary version of the tail specified by the given graph in the derivation duplicate given.
.. function:: void reconnectHead(DG::HyperEdge e, unsigned int eDup, std::shared_ptr<graph::Graph> g, unsigned int vDupTar)

    Reconnect an arbitrary version of the head specified by the given graph in the derivation duplicate given.

.. cpp:namespace-pop::


Class ``dg::Printer``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: dg::Printer
    

    This class is used to configure how derivation graphs are visualised,
    how much is visualised and which extra properties are printed.


Synopsis
^^^^^^^^

.. code-block:: c++
    
    struct MOD_DECL Printer {
        Printer();
        Printer(const Printer&) = delete;
        Printer &operator=(const Printer&) = delete;
        ~Printer();
        lib::IO::DG::Write::Printer &getPrinter() const;
        graph::Printer &getGraphPrinter();
        const graph::Printer &getGraphPrinter() const;
        void setWithShortcutEdges(bool value);
        bool getWithShortcutEdges() const;
        void setWithGraphImages(bool value);
        bool getWithGraphImages() const;
        void setLabelsAsLatexMath(bool value);
        bool getLabelsAsLatexMath() const;
        void pushVertexVisible(std::function<bool(std::shared_ptr<graph::Graph>, std::shared_ptr<DG>) > f);
        void popVertexVisible();
        void pushEdgeVisible(std::function<bool(DG::HyperEdge) > f);
        void popEdgeVisible();
        void setWithShortcutEdgesAfterVisibility(bool value);
        bool getWithShortcutEdgesAfterVisibility() const;
        void setVertexLabelSep(std::string sep);
        const std::string &getVertexLabelSep();
        void setEdgeLabelSep(std::string sep);
        const std::string &getEdgeLabelSep();
        void pushVertexLabel(std::function<std::string(std::shared_ptr<graph::Graph>, std::shared_ptr<DG>) > f);
        void popVertexLabel();
        void pushEdgeLabel(std::function<std::string(DG::HyperEdge) > f);
        void popEdgeLabel();
        void setWithGraphName(bool value);
        bool getWithGraphName() const;
        void setWithRuleName(bool value);
        bool getWithRuleName() const;
        void setWithRuleId(bool value);
        bool getWithRuleId() const;
        void setWithInlineGraphs(bool value);
        bool getWithInlineGraphs() const;
        void pushVertexColour(std::function<std::string(std::shared_ptr<graph::Graph>, std::shared_ptr<DG>) > f, bool extendToEdges);
        void popVertexColour();
        void pushEdgeColour(std::function<std::string(DG::HyperEdge) > f);
        void popEdgeColour();
    public:
        void setRotationOverwrite(std::function<int(std::shared_ptr<graph::Graph>) > f);
        void setMirrorOverwrite(std::function<bool(std::shared_ptr<graph::Graph>) > f);
    private:
        std::unique_ptr<graph::Printer> graphPrinter;
        std::unique_ptr<lib::IO::DG::Write::Printer> printer;
    };

Details
^^^^^^^

.. cpp:namespace-push:: dg::Printer

.. function:: graph::Printer &getGraphPrinter()
              const graph::Printer &getGraphPrinter() const

    :returns: a reference to the :class:`graph::Printer` used for graphs in vertices of the DG.
.. function:: void setWithShortcutEdges(bool value)
              bool getWithShortcutEdges() const

    Control whether or not hyperedges :math:`(T, H)` with :math:`|T| = |H| = 1`
    are printed as a simple arrow without the usual rectangle.
.. function::     void setWithGraphImages(bool value)
                bool getWithGraphImages() const

    Control whether or not each vertex is printed with a image of its graph in it.
.. function:: void setLabelsAsLatexMath(bool value)
              bool getLabelsAsLatexMath() const

    Control whether or not labels on vertices and hyperedges are put inline :math:`\LaTeX` math.
    Specifically, a label ``label`` is written as ``$\mathrm{label'}$``, with ``label'`` being
    ``label`` with all space characters escaped.
.. function:: void pushVertexVisible(std::function<bool(std::shared_ptr<graph::Graph>, std::shared_ptr<DG>)> f)

    Add another function controlling the visibility of vertices.
    All visibility functions must return `true` for a vertex to be visible.
.. function:: void popVertexVisible()

    Remove the last pushed vertex visibility function.
.. function:: void pushEdgeVisible(std::function<bool(DG::HyperEdge) > f)

    Add another function controlling the visibility of hyperedges.
    All visibility functions must return `true` for a hyperedge to be visible.
.. function:: void popEdgeVisible()

    Remove the last pushed hyperedge visibility function.
.. function:: void setWithShortcutEdgesAfterVisibility(bool value)
              bool getWithShortcutEdgesAfterVisibility() const

    Control whether or not hyperedges are depicted as simple arrows when all but 1 head and tail are hidden.
.. function:: void setVertexLabelSep(std::string sep)
              const std::string &getVertexLabelSep()

    Set/get the string used as separator between each part of each vertex label.
.. function:: void setEdgeLabelSep(std::string sep)
              const std::string &getEdgeLabelSep()

    Set/get the string used as separator between each part of each edge label.
.. function:: void pushVertexLabel(std::function<std::string(std::shared_ptr<graph::Graph>, std::shared_ptr<DG>)> f)

    Add another function for vertex labelling. The result of this function is appended to each label.
.. function:: void popVertexLabel()

    Remove the last pushed vertex labelling function.
.. function:: void pushEdgeLabel(std::function<std::string(DG::HyperEdge)> f)

    Add another function for edge labelling. The result of this function is appended to each label.
.. function:: void popEdgeLabel()

    Remove the last pushed edge labelling function.
.. function:: void setWithGraphName(bool value)
              bool getWithGraphName() const

    Control whether or not graph names are appended to the vertex labels (see also :func:`pushVertexLabel`).
.. function:: void setWithRuleName(bool value)
              bool getWithRuleName() const

    Control whether or not rules names are appended to the edge labels (see also :func:`pushEdgeLabel`).
.. function:: void setWithRuleId(bool value)
              bool getWithRuleId() const

    Control whether or not rules IDs are appended to the edge labels (see also :func:`pushEdgeLabel`).
.. function:: void setWithInlineGraphs(bool value)
              bool getWithInlineGraphs() const

    Control whether or not graph depictions should be precompiled, or be included inline in the DG figure.
.. function:: void pushVertexColour(std::function<std::string(std::shared_ptr<graph::Graph>, std::shared_ptr<DG>)> f, bool extendToEdges)

    Add another function for colouring vertices. The final colour of a vertex is the result of the first colour function returning a non-empty string.
    The functions are evaluated in the order they are pushed and the resulting string is used directly as a colour in Tikz.
    A hyperedge is also coloured if at least one head and one tail *can* be coloured with a colour for which `extendToEdges` is `true`.
    In this case, the hyperedge (and a subset of the head and tail connectors) is coloured with the first applicable colour.
    The edge extension of vertex colour takes lower precedence than explicitly added hyperedge colouring functions.
.. function:: void popVertexColour()

    Remove the last pushed vertex colouring function.
.. function:: void pushEdgeColour(std::function<std::string(DG::HyperEdge)> f)

    Add another function for colouring hyperedges. The final colour of a hyperedge (and all of its head and tail connectors) is the result of the
    first colour function returning a non-empty string.
.. function:: void popEdgeColour()

    Remove the last pushed hyperedge colouring function.
.. function:: void setRotationOverwrite(std::function<int(std::shared_ptr<graph::Graph>)> f)

    Overwrite the rotation set in the nested :cpp:class:`graph::Printer`. The given function will be used
    to set the rotation of each printed graph.
.. function:: void setMirrorOverwrite(std::function<bool(std::shared_ptr<graph::Graph>) > f)

    Overwrite the mirror set in the nested :cpp:class:`graph::Printer`. The given function will be used
    to set the mirror of each printed graph.

.. cpp:namespace-pop::

