.. _cpp-Post:

**********************************************************
Post.hpp
**********************************************************
.. default-domain:: cpp
.. default-role:: cpp:expr

.. py:currentmodule:: mod
.. cpp:namespace:: mod

This header contains various functions to manipulate post-processing (:ref:`mod_post`).
Commands for the post-processor are written to the command file ``out/post.sh``
which the post-processor executes internally as a Bash script.

.. function:: std::string post::makeUniqueFilePrefix()

    :returns: a string on the form ``out/iii_`` where ```iii``` is the next zero-padded integer
        from an internal counter.
.. function:: void post::command(const std::string &line)

    Write the given text to the command file and write a newline character.

    .. warning:: The contents of the command file is executed without any security checks.
.. function:: void post::flushCommands()

    Flush the command file buffer.
.. function:: void post::disableCommands()
              void post::enableCommands()

    Disable/enable command writing and flushing, also for commands emitted internally in the library.
.. function:: void post::reopenCommandFile()

    Reopen the command file, which may be useful if it was modified externally while open by the library.
.. function:: void post::summaryChapter(const std::string &heading)

    Command the post-processor to insert a ``\chapter`` macro in the summary.
.. function:: void post::summarySection(const std::string &heading)

    Command the post-processor to insert a ``\section`` macro in the summary.
.. function:: void post::summaryRaw(const std::string &latexCode)
              void post::summaryRaw(const std::string &latexCode, const std::string &file)

    Command the post-processor to insert the given code verbatim in the summary.
    If `file` is given then that will be appended to a unique prefix for the final filename the code is stored in.
.. function:: void post::summaryInput(const std::string &filename)

    Command the post-processor to insert a ``\input`` macro in the summary.
.. function:: void post::disableInvokeMake()
              void post::enableInvokeMake()

    Disable/enable the invocation of Make in the post-processor.
    The processing of commands and generation of Makefiles will still be carried out,
    and Make invocation can be done manually afterwards through the post-processor
.. function:: void post::disableCompileSummary()
              void post::enableCompileSummary()

    Disable/enable the compilation of the final summary during post-processing.
    The compilation can be invoked manually afterwards through the post-processor.
