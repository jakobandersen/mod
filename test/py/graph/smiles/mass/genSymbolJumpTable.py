post("disableSummary")
data = list()
data.append((1, "H", "Hydrogen"))
data.append((2, "He", "Helium"))
data.append((3, "Li", "Lithium"))
data.append((4, "Be", "Beryllium"))
data.append((5, "B", "Boron"))
data.append((6, "C", "Carbon"))
data.append((7, "N", "Nitrogen"))
data.append((8, "O", "Oxygen"))
data.append((9, "F", "Fluorine"))
data.append((10, "Ne", "Neon"))
data.append((11, "Na", "Sodium"))
data.append((12, "Mg", "Magnesium"))
data.append((13, "Al", "Aluminium"))
data.append((14, "Si", "Silicon"))
data.append((15, "P", "Phosphorus"))
data.append((16, "S", "Sulfur"))
data.append((17, "Cl", "Chlorine"))
data.append((18, "Ar", "Argon"))
data.append((19, "K", "Potassium"))
data.append((20, "Ca", "Calcium"))
data.append((21, "Sc", "Scandium"))
data.append((22, "Ti", "Titanium"))
data.append((23, "V", "Vanadium"))
data.append((24, "Cr", "Chromium"))
data.append((25, "Mn", "Manganese"))
data.append((26, "Fe", "Iron"))
data.append((27, "Co", "Cobalt"))
data.append((28, "Ni", "Nickel"))
data.append((29, "Cu", "Copper"))
data.append((30, "Zn", "Zinc"))
data.append((31, "Ga", "Gallium"))
data.append((32, "Ge", "Germanium"))
data.append((33, "As", "Arsenic"))
data.append((34, "Se", "Selenium"))
data.append((35, "Br", "Bromine"))
data.append((36, "Kr", "Krypton"))
data.append((37, "Rb", "Rubidium"))
data.append((38, "Sr", "Strontium"))
data.append((39, "Y", "Yttrium"))
data.append((40, "Zr", "Zirconium"))
data.append((41, "Nb", "Niobium"))
data.append((42, "Mo", "Molybdenum"))
data.append((43, "Tc", "Technetium"))
data.append((44, "Ru", "Ruthenium"))
data.append((45, "Rh", "Rhodium"))
data.append((46, "Pd", "Palladium"))
data.append((47, "Ag", "Silver"))
data.append((48, "Cd", "Cadmium"))
data.append((49, "In", "Indium"))
data.append((50, "Sn", "Tin"))
data.append((51, "Sb", "Antimony"))
data.append((52, "Te", "Tellurium"))
data.append((53, "I", "Iodine"))
data.append((54, "Xe", "Xenon"))
data.append((55, "Cs", "Caesium"))
data.append((56, "Ba", "Barium"))
data.append((57, "La", "Lanthanum"))
data.append((58, "Ce", "Cerium"))
data.append((59, "Pr", "Praseodymium"))
data.append((60, "Nd", "Neodymium"))
data.append((61, "Pm", "Promethium"))
data.append((62, "Sm", "Samarium"))
data.append((63, "Eu", "Europium"))
data.append((64, "Gd", "Gadolinium"))
data.append((65, "Tb", "Terbium"))
data.append((66, "Dy", "Dysprosium"))
data.append((67, "Ho", "Holmium"))
data.append((68, "Er", "Erbium"))
data.append((69, "Tm", "Thulium"))
data.append((70, "Yb", "Ytterbium"))
data.append((71, "Lu", "Lutetium"))
data.append((72, "Hf", "Hafnium"))
data.append((73, "Ta", "Tantalum"))
data.append((74, "W", "Tungsten"))
data.append((75, "Re", "Rhenium"))
data.append((76, "Os", "Osmium"))
data.append((77, "Ir", "Iridium"))
data.append((78, "Pt", "Platinum"))
data.append((79, "Au", "Gold"))
data.append((80, "Hg", "Mercury"))
data.append((81, "Tl", "Thallium"))
data.append((82, "Pb", "Lead"))
data.append((83, "Bi", "Bismuth"))
data.append((84, "Po", "Polonium"))
data.append((85, "At", "Astatine"))
data.append((86, "Rn", "Radon"))
data.append((87, "Fr", "Francium"))
data.append((88, "Ra", "Radium"))
data.append((89, "Ac", "Actinium"))
data.append((90, "Th", "Thorium"))
data.append((91, "Pa", "Protactinium"))
data.append((92, "U", "Uranium"))
data.append((93, "Np", "Neptunium"))
data.append((94, "Pu", "Plutonium"))
data.append((95, "Am", "Americium"))
data.append((96, "Cm", "Curium"))
data.append((97, "Bk", "Berkelium"))
data.append((98, "Cf", "Californium"))
data.append((99, "Es", "Einsteinium"))
data.append((100, "Fm", "Fermium"))
data.append((101, "Md", "Mendelevium"))
data.append((102, "No", "Nobelium"))
data.append((103, "Lr", "Lawrencium"))
data.append((104, "Rf", "Rutherfordium"))
data.append((105, "Db", "Dubnium"))
data.append((106, "Sg", "Seaborgium"))
data.append((107, "Bh", "Bohrium"))
data.append((108, "Hs", "Hassium"))
data.append((109, "Mt", "Meitnerium"))
data.append((110, "Ds", "Darmstadtium"))
data.append((111, "Rg", "Roentgenium"))
data.append((112, "Cn", "Copernicium"))
data.append((113, "Uut", "Ununtrium"))
data.append((114, "Fl", "Flerovium"))
data.append((115, "Uup", "Ununpentium"))
data.append((116, "Lv", "Livermorium"))
data.append((117, "Uus", "Ununseptium"))
data.append((118, "Uuo", "Ununoctium"))

assert(all(len(a[1]) <= 3 for a in data))
data = sorted(data, key=lambda a: a[1])
data1 = [a for a in data if len(a[1]) == 1]
data2 = [a for a in data if len(a[1]) == 2]
data3 = [a for a in data if len(a[1]) == 3]

with open("out/data1.cpp", "w") as f:
	for a in data1:
		print("case '", a[1], "': return ", a[1], ";", sep="", file=f)
with open("out/data2.cpp", "w") as f:
	firstChar = set(a[1][0] for a in data2)
	for c1 in firstChar:
		print("case '", c1, "':", sep="", file=f)
		secondChar = set(a[1][1] for a in data2 if a[1][0] == c1)
		print("switch(c2) {", file=f)
		for c2 in secondChar:
			print("case '", c2, "': return ", c1+c2, ";", sep="", file=f)
		print("default: return Invalid;", file=f)
		print("}", file=f)
with open("out/data3.cpp", "w") as f:
	firstChar = set(a[1][0] for a in data3)
	for c1 in firstChar:
		print("case '", c1, "':", sep="", file=f)
		secondChar = set(a[1][1] for a in data3 if a[1][0] == c1)
		print("	switch(c2) {", file=f)
		for c2 in secondChar:
			print("	case '", c2, "':", sep="", file=f)
			thirdChar = set(a[1][2] for a in data3 if a[1][0] == c1 and a[1][1] == c2)
			print("		switch(c3) {", file=f)
			for c3 in thirdChar:
				print("		case '", c3, "': return ", c1+c2+c3, ";", sep="", file=f)
			print("		default: return Invalid;", file=f)
			print("		}", file=f)
		print("	default: return Invalid;", file=f)
		print("}", file=f)
