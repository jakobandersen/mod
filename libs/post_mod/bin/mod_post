#!/usr/bin/env bash

# Constants
self="mod_post"
texFolder="summary"
outFolder="out"
texMasterFile="summary.tex"
texFigureTemplateFile="figureTemplate.tex"
texFile="$texFolder/all.tex"
makefile="$texFolder/Makefile"
makefileImpl=${makefile}Impl
makefileDep=${makefile}Dep
makefileAllTarget=${makefile}AllTarget
makefileClean=${makefile}Clean

# Common functions
function latexEsc {
    echo "$@" \
		| sed 's/_/\\_/g' \
		| sed 's/\^/\\textasciicircum/g' \
		| sed 's/{/\\{/g' \
		| sed 's/}/\\}/g' \
		| sed 's/</\\textless{}/g' \
		| sed 's/>/\\textgreater{}/g' \
		| sed 's/#/\\#/g'
}

function printHelp {
	echo "Usage:"
	echo "$0 [options]"
	echo "Options:"
	echo "  --help, -h  Show this message."
	echo "  -j <N>      Use '-j <N>' as argument when calling make."
	echo "  --install-format, --install-format-sudo"
	echo "              Compile the common Latex preamble and install it."
	echo "              The '-sudo' version will run the copying through with sudo."
	echo "  --mode ...  Enter a magic mode for data conversion."
}

# Find prefix
if [ -z "$MOD_PREFIX" ]; then
	MOD_PREFIX="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd )/.."
	stat $MOD_PREFIX/bin/$self &> /dev/null
	if [ $? -ne 0 ]; then
		echo "Could not find our own location. Please set PATH, MOD_PREFIX or use the correct path."
		echo "PATH is $PATH"
		echo "Guessed path is $MOD_PREFIX/bin/$self"
		exit 1
	fi
else
	stat $MOD_PREFIX/bin/$self &> /dev/null
	if [ $? -ne 0 ]; then
		echo "Invalid path in MOD_PREFIX. \"$MOD_PREFIX/bin/$self\" does not exist."
		exit 1
	fi
fi
export MOD_PREFIX
this="$MOD_PREFIX/bin/$self"
if [ "$this" -ef "$(which $self)" ]; then
	this=$self
fi

# Args
if [ ! -n "$MOD_NUM_POST_THREADS" ]; then
	export MOD_NUM_POST_THREADS=2
fi



if test "x$1" = xclean; then
	$this --mode clean
	exit $?
elif test "x$1" = "x--install-format" -o "x$1" = "x--install-format-sudo"; then
	echo "Compiling common Latex preamble into format file: "
	mkdir -p out
	rm -f out/commonPreamble.fmt
	$this --mode compileFmt
	res=$?
	echo ""
	if [ $res -ne 0 ]; then
		exit $res
	fi
	p=$MOD_PREFIX/share/mod/
	echo "Installing out/commonPreamble.fmt in $p"
	if [ "x$1" = "x--install-format" ]; then
		cp out/commonPreamble.fmt $p
	else
		sudo cp out/commonPreamble.fmt $p
	fi
elif test "x$1" != "x--mode"; then
	echo "PostMØD ------------------------------------------------------------"
	echo "Prefix: $MOD_PREFIX"

	# Parse options
	while [ true ]; do
		case $1 in
			"--help"|"-h" )
				printHelp
				exit 0
				;;
			"-j" )
				export MOD_NUM_POST_THREADS=$2
				shift
				shift
				;;
			"" )
				break
				;;
			* )
				echo "Unknown option '$1' for PostMØD."
				printHelp
				exit 1
				;;
		esac
	done
	
	$this --mode makefile
	res=$?
	if [ $res -ne 0 ]; then
		exit $res
	fi

	if [ -e out/disableInvokeMake ]; then
		echo "Post-processing disabled by user. Run"
		echo "   $this --mode invokeMake"
		echo "to manually invoke it."
		exit 0
	else
		$this --mode invokeMake
		exit $?
	fi
else # $1 == --mode
	mode=$2
	if test "x$mode" = "x"; then
		echo "Error in --mode, missing mode."
		exit 1
	fi
	shift
	shift

	function printStatus {
		echo -n "$1 "
	}

	function clean {
		make -f $makefile clean
	}
	
	function invokeMake {
		makeArgs="-s -j $MOD_NUM_POST_THREADS -f summary/Makefile all"
		echo "Running makefile (make $makeArgs)"
		time make $makeArgs
	}

	function makefile {
		echo "Generating makefile for summary generation"
		function genMakefile {
			# Check needed files
			stat $MOD_PREFIX/share/mod/$textMasterFile &> /dev/null
			if [ $? -ne 0 ]; then
				echo "Could not find master text file '$textMasterFile' at $MOD_PREFIX/share/mod/$textMasterFile"
				return 1
			fi

			# Prepare texFolder and makefiles
			if [ -e $texFolder ]; then
				if [ -d $texFolder ]; then
					rm -rf $texFolder/*
				else
					rm -f $texFolder
					mkdir $texFolder
				fi
			else
				mkdir $texFolder
			fi
			function initMakefile {
				echo "SHELL=/bin/bash"
				echo "$texFile: gen"
			}
			function endMakefile {
				if [ -e out/disableCompileSummary ]; then
					echo "	echo ''"
					echo "	echo 'Summary compilation disabled by user. Run'"
					echo "	echo '   $this --mode compileSummary'"
					echo "	echo 'to manually invoke it.'"
					echo " $texFile" >> $makefileAllTarget
				else
					echo " summary.pdf" >> $makefileAllTarget
				fi
				echo "summary.pdf: $texFile"
				echo "	$this --mode compileSummary"
				echo "include $makefileImpl"
				echo "include $makefileDep"
				echo "include $makefileAllTarget"
				echo "include $makefileClean"
			}
			function initMakefileImpl {
				local p=$MOD_PREFIX/share/mod/commonPreamble
				if [ -f $p.fmt ]; then
					if [ ! -f out/commonPreamble.fmt ]; then
						ln -s $p.fmt out/commonPreamble.fmt &> /dev/null
						if [ $? -ne 0 ]; then
							echo "out/commonPreamble.fmt: $p.tex"
							echo "	echo 'Failed to create symbolic link in out/ for commonPreamble.fmt. Falling back to compiling it each time.'"
							echo "	$this --mode compileFmt"
						fi
					fi
				else
					echo "out/commonPreamble.fmt: $p.tex"
					echo "	$this --mode compileFmt"
				fi
				echo ""
			}
			function initMakefileDep {
				echo -n "gen:"
			}
			function initMakefileAllTarget {
				echo ".PHONY: all"
				echo -n "all:"
			}
			function initMakefileClean {
				echo ".PHONY: clean"
				echo "clean:"
				echo -n "	rm -f summary/{all.tex,summary.{aux,log,out,pdf,toc},master.tex}"
			}
			initMakefile > $makefile
			initMakefileImpl > $makefileImpl
			initMakefileDep > $makefileDep
			initMakefileAllTarget > $makefileAllTarget
			initMakefileClean > $makefileClean
			echo '% dummy' > $texFile

			function post {
				echo "	$1" >> $makefile
			}

			#---------------------------------------------------------------------
			# Invocation Control
			#---------------------------------------------------------------------

			function enableInvokeMake {
				rm -f out/disableInvokeMake
			}
			function disableInvokeMake {
				touch out/disableInvokeMake
			}

			function enableCompileSummary {
				rm -f out/disableCompileSummary
			}
			function disableCompileSummary {
				touch out/disableCompileSummary
			}

			function enableSummary {
				>&2 echo "WARNING: post command 'enableSummary' is deprecated', use 'ensableInvokeMake' instead."
				enableInvokeMake
			}
			function disableSummary {
				>&2 echo "WARNING: post command 'disableSummary' is deprecated', use 'disableInvokeMake' instead."
				disableInvokeMake
			}

			#---------------------------------------------------------------------
			# Summary
			#---------------------------------------------------------------------

			function summaryChapter {
				echo "	echo '\summaryChapter{$(latexEsc "$1")}' >> $texFile" >> $makefile
			}
			function summarySection {
				echo "	echo '\summarySection{$(latexEsc "$1")}' >> $texFile" >> $makefile
			}
			function summarySectionNoEscape {
				echo "	echo '\summarySection{$1}' >> $texFile" >> $makefile
			}
			function summarySubsection {
				echo "	echo '\summarySubsection{$(latexEsc "$1")}' >> $texFile" >> $makefile
			}
			function summarySubsubsection {
				echo "	echo '\summarySubsubsection{$(latexEsc "$1")}' >> $texFile" >> $makefile
			}
			function summaryInput {
				echo "	echo '\input{$1}' >> $texFile" >> $makefile
			}

			# fileNoExt
			function summaryPDF {
				echo -n " $1.pdf" >> $makefileDep
				echo "	echo '\summaryPDF{$1}{\\texttt{$(latexEsc $1)}}' >> $texFile" >> $makefile
			}

			# name fileNoExt fileMolNoExt
			function summaryGraph {
				local name=$1
				local fileNoExt=$2
				local fileMolNoExt=$3
				echo "	echo -n '\summaryGraph' >> $texFile" >> $makefile
				echo -n "	echo '{\\texttt{$(latexEsc $name)}}" >> $makefile
				echo -n "{\summaryGraphFile{$fileNoExt}{\\texttt{$(latexEsc $fileNoExt)}}}" >> $makefile
				if test "x$fileMolNoExt" != "x"; then
					echo -n "{\summaryGraphFile{$fileMolNoExt}{\\texttt{$(latexEsc $fileMolNoExt)}}}" >> $makefile
				else
					echo -n "{}" >> $makefile
				fi
				echo "' >> $texFile" >> $makefile
				echo -n " $fileNoExt.pdf" >> $makefileDep
				if test "x$fileMolNoExt" != "x"; then
					echo -n " $fileMolNoExt.pdf" >> $makefileDep
				fi
			}

			# name fileNoExt fileMolNoExt fileCombinedNoExt fileConstraints
			function summaryRule {
				local name=$1
				local fileNoExt=$2
				local fileMolNoExt=$3
				local fileCombinedNoExt=$4
				local fileConstraints=$5
				echo -n "	echo '\summaryRule{$(latexEsc $name)}" >> $makefile
				echo -n "{\summaryRuleSpan{$fileNoExt}{$(latexEsc $fileNoExt)}}" >> $makefile
				if test "x$fileMolNoExt" != "x"; then
					echo -n "{\summaryRuleSpan{$fileMolNoExt}{$(latexEsc $fileMolNoExt)}}" >> $makefile
				else
					echo -n "{}" >> $makefile
				fi
				if test "x$fileCombinedNoExt" != "x"; then
					echo -n "{\summaryRuleCombined{$fileCombinedNoExt}{$(latexEsc $fileCombinedNoExt)}}" >> $makefile
				else
					echo -n "{}" >> $makefile
				fi
				echo -n "{$fileConstraints}" >> $makefile
				echo "' >> $texFile" >> $makefile
				
				echo -n " ${fileNoExt}_L.pdf" >> $makefileDep
				echo -n " ${fileNoExt}_K.pdf" >> $makefileDep
				echo -n " ${fileNoExt}_R.pdf" >> $makefileDep
				if test "x$fileMolNoExt" != "x"; then
					echo -n " ${fileMolNoExt}_L.pdf" >> $makefileDep
					echo -n " ${fileMolNoExt}_K.pdf" >> $makefileDep
					echo -n " ${fileMolNoExt}_R.pdf" >> $makefileDep
				fi
				if test "x$fileCombinedNoExt" != "x"; then
					echo -n " $fileCombinedNoExt.pdf" >> $makefileDep
				fi
			}

			# fileNoExt1 fileNoExt2
			function summaryDerivation {
				local fileNoExt1=$1
				local fileNoExt2=$2
				echo "	echo '\summaryDerivation{$fileNoExt1}{$(latexEsc $fileNoExt1)}{$fileNoExt2}{$(latexEsc $fileNoExt2)}' >> $texFile" >> $makefile
				
				local f=$fileNoExt1
				echo -n " ${f}_derL.pdf ${f}_derK.pdf ${f}_derR.pdf" >> $makefileDep
				local f=$fileNoExt2
				echo -n " ${f}_derG.pdf ${f}_derD.pdf ${f}_derH.pdf" >> $makefileDep
			}

			# name fileNoExt
			function summaryDGNonHyper {
				local name=$1
				local file=$2
				echo "	echo '\summaryDGNonHyper{\\texttt{$(latexEsc $name)}}{$file}{\\texttt{$(latexEsc $file)}}' >> $texFile" >> $makefile

				echo -n " $file.pdf" >> $makefileDep
			}

			# name fileNoExt
			function summaryDGHyperOld {
				local name=$1
				local file=$2
				echo "	echo '\summaryDGHyperOld{\\texttt{$(latexEsc $name)}}{$file}{\\texttt{$(latexEsc $file)}}' >> $texFile" >> $makefile

				echo -n " $file.pdf" >> $makefileDep
			}

			# name fileNoExt
			function summaryDGHyper {
				local name=$1
				local fileNoExt=$2
				echo "	echo '\summaryDGHyper{\\texttt{$(latexEsc $name)}}{$fileNoExt}{\\texttt{$(latexEsc $fileNoExt)}}' >> $texFile" >> $makefile

				echo -n " $fileNoExt.pdf" >> $makefileDep
			}

			# fileNoExt
			function summaryRC {
				local file=$1
				echo "	echo '\summaryRC{$file}{\\texttt{$(latexEsc $file)}}' >> $texFile" >> $makefile

				echo -n " $file.pdf" >> $makefileDep
			}

			#---------------------------------------------------------------------
			# Other
			#---------------------------------------------------------------------

			# graphType fileNoExt outType extraArgs
			function gv {
				local graphType=$1
				local fileNoExt="$2"
				local outType=$3
				local extraArgs="$4"
				echo -n " $fileNoExt.$outType" >> $makefileClean
				echo "$fileNoExt.$outType: $fileNoExt.dot" >> $makefileImpl
				echo "	$this --mode gv $graphType \"$fileNoExt\" $outType \"$extraArgs\"" >> $makefileImpl
				echo -n " $fileNoExt.$outType" >> $makefileDep

				return
			}

			# graphType fileNoExt [noOverlay]
			function coordsFromGV {
				local graphType=$1
				local fileNoExt=$2
				local noOverlay=$3
				echo -n " $fileNoExt.plain ${fileNoExt}_coord.tex" >> $makefileClean
				function common {
					reGrep='\[.* image="\([^\"]*\)".*\]'
					reSed='s/.*\[.* image="\([^\"]*\)".*\].*/\1/'
					grep "$reGrep" $fileNoExt.dot | sed "$reSed" | while read f; do
						echo -n " $f" >> $makefileImpl
					done
					echo "" >> $makefileImpl
					echo "	$this --mode coordsFromGV $graphType \"$fileNoExt\" $noOverlay" >> $makefileImpl
				}
				# extra dependency to avoid race conditions, see http://www.gnu.org/software/automake/manual/html_node/Multiple-Outputs.html
				echo -n "${fileNoExt}_coord.tex:" >> $makefileImpl
				common
				echo -n "$fileNoExt.plain: ${fileNoExt}_coord.tex" >> $makefileImpl
				common
				echo -n " $fileNoExt.plain ${fileNoExt}_coord.tex" >> $makefileDep
			}

			# fileNoExt fileCoordsNoExt [compilation repetitions]
			function compileTikz {
				local fileNoExt=$1
				local fileCoordNoExt=$2
				local repeats=${3:-1}
				echo -n " $fileNoExt.{pdf,out,aux,log}" >> $makefileClean
				echo -n "$fileNoExt.pdf:" >> $makefileImpl
				echo -n  " $fileCoordNoExt.tex" >> $makefileImpl
				echo -n  " $fileNoExt.tex" >> $makefileImpl
				echo -n  " out/commonPreamble.fmt" >> $makefileImpl
				echo "" >> $makefileImpl
				echo "	$this --mode compileTikz \"$fileNoExt\" \"$fileCoordNoExt\" $repeats" >> $makefileImpl
				echo -n " $fileNoExt.pdf" >> $makefileDep
			}

			# fileNoExtPdf fileNoExtSvg
			function pdfToSvg {
				local filePdf=$1.pdf
				local fileSvg=$2.svg
				echo -n " $fileSvg" >> $makefileClean
				echo "$fileSvg: $filePdf" >> $makefileImpl
				echo "	$this --mode pdfToSvg \"$1\" \"$2\"" >> $makefileImpl
				echo -n " $fileSvg" >> $makefileDep
			}

			# fileNoExt
			function svgToPdf {
				local inFile="$1.svg"
				local outFile="$1.pdf"
				echo -n " $outFile" >> $makefileClean
				echo -n " $outFile" >> $makefileDep
				echo "$outFile: $inFile" >> $makefileImpl
				echo "	$this --mode svgToPdf \"$inFile\" \"$outFile\"" >> $makefileImpl
			}

			#---------------------------------------------------------------------
			# The actual processing
			#---------------------------------------------------------------------
			error=$(. out/post.sh)
			res=$?
			if test "x$error" != "x" -o $res -ne 0; then
				echo "Error in summary makefile generation."
				echo $error
				echo "Error code: $res"
				return 1
			fi

			echo "" >> $makefileDep
			echo "" >> $makefileClean
			endMakefile >> $makefile
			return 0
		}
		genMakefile
		res=$?
		if [ $res -ne 0 ]; then
			echo "Makefile generation failed"
			exit $res
		fi
	}
	
	function compileSummary {
		local latexArgs="-interaction=nonstopmode -halt-on-error"
		latexArgs="$latexArgs -jobname summary -output-directory $texFolder $texFolder/master.tex"
		touch $texFolder/master.tex
		echo "\\newcommand{\modPrefix}{$MOD_PREFIX}" >> $texFolder/master.tex
		echo "\\newcommand{\\modInputFile}{$texFolder/all.tex}" >> $texFolder/master.tex
		echo "\\input{\modPrefix/share/mod/$texMasterFile}" >> $texFolder/master.tex
		local latexCmd="pdflatex $latexArgs"

		echo '' # each target might print a status message
		echo -e "Compiling with (in $texFolder/):\n\t$latexCmd"
		echo -n 'Running pdflatex 1' && $latexCmd > /dev/null && \
			echo -n ', 2' && $latexCmd > /dev/null && \
			echo -n ', 3' && $latexCmd > /dev/null && \
			echo '' || $latexCmd
	}

	function compileFmt {
		printStatus "$FUNCNAME"
		local texArgs="-interaction=nonstopmode -halt-on-error -ini"
		texArgs="$texArgs -output-directory out/ -jobname commonPreamble"
		local texContent="&pdflatex \\input{$MOD_PREFIX/share/mod/commonPreamble.tex}\\usepackage{$MOD_PREFIX/share/mod/mod}\\dump"
		latexCmd="pdflatex $texArgs $texContent"
		$latexCmd &> /dev/null || $latexCmd
	}

	dimensionTooLargeString="\\dontUseTooLargeCoords"

	# fileNoExt fileCoordsNoExt [compilation repetitions]
	function compileTikz {
		printStatus "$FUNCNAME"
		local fileNoExt=$1
		local fileCoordsNoExt=$2
		local repeats=${3:-1}
		# check if we need to fall back on Graphviz
		if test "x$fileCoordsNoExt" != "x"; then
			cat $fileCoordsNoExt.tex | grep "$dimensionTooLargeString" &> /dev/null
			if test $? -eq 0; then
				echo "graph { 0 [ shape=plaintext label=\"Figure too large, see $fileCoordsNoExt.pdf\" ]; }" | \
					dot -Tpdf -o $fileNoExt.pdf
				return $?
			fi
		fi
		local latexArgs="-interaction=nonstopmode -halt-on-error"
		latexArgs="$latexArgs -jobname $fileNoExt -fmt out/commonPreamble.fmt \"\\newcommand{\modPrefix}{$MOD_PREFIX}\\newcommand{\modFigureInput}{$fileNoExt.tex}\input{\modPrefix/share/mod/$texFigureTemplateFile}\""
		local latexCmd="pdflatex $latexArgs"
		for i in $(seq $repeats); do
			$latexCmd &> /dev/null
			local res=$?
			if test $res -ne 0; then
				$latexCmd
				echo "Error compiling $fileNoExt.tex, see $fileNoExt.log"
				break
			fi
		done
		return $res
	}

	gvArgs_base=""
	gvArgs_graph="$gvArgs_base -Kneato"
	#gvArgs_ruleSide="$gvArgs_base -Kneato -Nfontsize=28 -Epenwidth=3"
	gvArgs_rule="$gvArgs_base -Kneato"
	gvArgs_ruleCombined="$gvArgs_base -Kneato"
	gvArgs_dgNonHyper="$gvArgs_base -Kneato -Goverlap=false -Elen=1.1"
	gvArgs_dgHyper="$gvArgs_base -Kneato -Goverlap=false -Elen=1.5"
	#gvArgs_dgHyperDot="$gvArgs_base -Goverlap=false -Elen=1.5"
	gvArgs_rc="$gvArgs_base -Kdot";

	# graphType fileNoExt outType extraArgs
	function gv {
		printStatus "$FUNCNAME($1)"
		local graphType=$1
		local fileNoExt="$2"
		local outType=$3
		local extraArgs="$4"
		local gvArgsVar="gvArgs_$graphType"
		local gvArgs="-T$outType ${!gvArgsVar} $extraArgs"
		dot $gvArgs -o $fileNoExt.$outType $fileNoExt.dot
	}

	# graphType fileNoExt [noOverlay]
	function coordsFromGV {
		printStatus "$FUNCNAME($1)"
		local graphType=$1
		local fileNoExt=$2
		local noOverlay=$3
		local coordFile=${fileNoExt}_coord.tex
		local gvArgsVar="gvArgs_$graphType"
		local gvArgs="-Tplain ${!gvArgsVar} -o $fileNoExt.plain"
		# this now assumes that dot will create the coordinates
		dot $gvArgs $fileNoExt.dot
		res=$?
		if test $res -ne 0; then
			return $res
		fi
		echo "% dummy" > $coordFile.$$
		# check size of graph
		grep "^graph" $fileNoExt.plain | awk '{if($3 > 50 || $4 > 50) {exit 1} else {exit 0}}'
		if test $? -ne 0; then
			width=$(grep "^graph" $fileNoExt.plain | awk '{print $3}')
			height=$(grep "^graph" $fileNoExt.plain | awk '{print $4}')
			#echo "Dimension of $fileNoExt ($width, $height) too large for Latex, default to Graphviz."
			echo "$dimensionTooLargeString" >> $coordFile.$$
			local gvArgs="-Tpdf ${!gvArgsVar} -o ${fileNoExt}_coord.pdf"
			dot $gvArgs $fileNoExt.dot
		fi
		cat $fileNoExt.plain | awk -v noOverlay="x$noOverlay" '
function abs(a) {
	return a < 0 ? -a : a
}
BEGIN {
	stop = 0
}
{
	if($0 ~ /^stop/) {
		exit 0
	} else if($0 ~ /^node/) {
		name=$2
		gsub(/"/, "", name)
		x=$3
		y=$4
		# avoid underflow in Latex
		if(abs(x) < 1e-4)
			x = 0
		if(abs(y) < 1e-4)
			y = 0
		if(noOverlay == "xnoOverlay") {
			printf "\\node                (\\modIdPrefix v-coord-%s) at (%s, %s) {};\n", name, x, y
		} else {
			printf "\\coordinate[overlay] (\\modIdPrefix v-coord-%s) at (%s, %s) {};\n", name, x, y
		}
	} else {
		# ignore
	}
}
' >> $coordFile.$$
		mv $coordFile.$$ $coordFile
	}

	# fileNoExtPdf fileNoExtSvg
	function pdfToSvg {
		local filePdf=$1.pdf
		local fileSvg=$2.svg
		pdf2svg "$filePdf" "$fileSvg"
	}

	# inFile outFile
	function svgToPdf {
		local inFile="$1"
		local outFile="$2"
		echo "graph { a [ shape=plaintext label=\"\" image=\"$inFile\" ] }" | \
			neato -Tpdf $gvArgs_svgToPdf -o $outFile
	}

	$mode "$@"
	exit $?
fi
