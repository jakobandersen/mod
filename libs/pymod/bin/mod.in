#!/bin/bash

function printHelp {
	echo "MØD Wrapper usage:"
	echo "$0 [options] [Python options]"
	echo ""
	echo "  Meta options"
	echo ""
	echo "	--help, -h      Show this and exit."
	echo "	--version, -v   Print version and exit."
	echo "	--get-latex     Copy mod.sty and mod.mk to the current folder and exit."
	echo ""
	echo "  Execution Customization Options"
	echo ""
	echo "	-i              Enter interactive mode after execution, and disable the log."
	echo "	-q              Use quiet mode."
	echo ""
	echo "  Post-processing Options"
	echo ""
	echo "	--nopost        Do not generate the summary."
	echo "	-j <N>          Set number of available threads for post processing."
	echo "	clean           Delete out/ and summary/. Any other args are ignored."
	echo ""
	echo "  Debugging Options"
	echo ""
	echo "	--profile       Use callgrind to profile the execution."
	echo "	--memcheck      Use valgrind to do memory check."
	echo "	--vgArgs <arg>  Options for valgrind."
	echo "	--debug         Start gdb with the program."
}

# Args
doPrintHelp="false"
doVersion="false"
getLatex="false"
post="true"
profile="false"
memcheck="false"
debug="false"
clean="false"
vgArgs=""
interactive="false"
quiet="false"
interceptedArgs=""
summaryArgs=""

# File names
summaryMaker="mod_post"
obabelSupp="obabel.supp"
pythonSupp="python.supp"

# Find prefix
self="mod"
if [ -z "$MOD_PREFIX" ]; then
	MOD_PREFIX="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd )/.."
	stat $MOD_PREFIX/bin/$self &> /dev/null
	if [ $? -ne 0 ]; then
		echo "Could not find our own location. Please set PATH, MOD_PREFIX or use the correct path."
		echo "PATH is $PATH"
		echo "Guessed path is $MOD_PREFIX/bin/$self"
		exit 1
	fi
else
	stat $MOD_PREFIX/bin/$self &> /dev/null
	if [ $? -ne 0 ]; then
		echo "Invalid path in MOD_PREFIX. \"$MOD_PREFIX/bin/$self\" does not exist."
		exit 1
	fi
fi
export MOD_PREFIX


args=()
summaryArgs=()

# Parse options
while test "$1" != ""; do
	case $1 in
		"--help"|"-h" )
			doPrintHelp="true"
			shift
			;;
		"--version"|"-v" )
			doVersion="true"
			shift
			;;
		"--get-latex" )
			getLatex="true"
			shift
			;;
		"-i" )
			interactive="true"
			shift
			;;
		"-q" )
			quiet="true"
			shift
			;;
		"--profile" )
			profile="true"
			shift
			;;
		"--memcheck" )
			memcheck="true"
			shift
			;;
		"--vgArgs" )
			vgArgs="$2"
			shift
			shift
			;;
		"--debug" )
			debug="true"
			post="false"
			shift
			;;
		"--nopost" )
			post="false"
			shift
			;;
		"-j" )
			summaryArgs+=(-j "$2")
			shift
			shift
			;;
		"clean" )
			clean="true"
			post="false"
			shift
			;;
		* )
			args+=("$1")
			shift
			;;
	esac
done

if test "$quiet" = "false"; then
	echo "MØD Wrapper --------------------------------------------------------"
	echo "Prefix: $MOD_PREFIX"
	echo -n "MØD version "
fi
if test "$quiet" = "false" -o "$doVersion" = "true"; then
	echo "@PROJECT_VERSION@"
fi


if test "$doPrintHelp" = "true"; then
	printHelp $0
	exit 0
fi
if test "$doVersion" = "true"; then
	exit 0
fi
if test "$getLatex" = "true"; then
	if test "$quiet" = "false"; then
		echo "cp $MOD_PREFIX/share/mod/mod.{sty,mk} ./"
	fi
	cp $MOD_PREFIX/share/mod/mod.{sty,mk} ./
	exit $?
fi



if test "$quiet" = "false"; then
	echo "Plugins ------------------------------------------------------------"
fi
pySearchPaths=""
plugins=()
function loadPluginFile {
	function getVar {
		varName=$1
		f="$2"
		grep "^$varName:" "$f" &> /dev/null
		res=$?
		if test $res -ne 0; then
			echo "Bad plugin file, '$varName' not found: $f"
			return $res
		fi
		numLines=$(grep "^$varName:" "$f" | wc -l)
		if test $numLines -ne 1; then
			echo "Bad plugin file, multiple '$varName' lines ($numLines): $f"
			return 1
		fi
		grep "^$varName:" "$f" | sed -e "s/^$varName:[ \t]*//" -e "s/[ \t]*$//"
		return 0
	}
	if ! test -f "$f"; then
		echo "Bad plugin file, not a regular file: $f"
		continue
	fi
	name=$(getVar name "$f")
	if test $? -ne 0; then
		echo $name
		continue
	fi
	pluginPath=$(getVar path "$f")
	if test $? -ne 0; then
		echo $pluginPath
		continue
	fi
	plugins+=($name)
	pySearchPath="$pySearchPath:$pluginPath"
	if test "$quiet" = "false"; then
		echo " $name: $pluginPath"
	fi
}
function loadPlugins {
	path="$1"
	if test ! -d "$path"; then
		return
	fi
	for f in $(ls $path/*); do
		loadPluginFile "$f"
	done
}

globalPluginPath="$MOD_PREFIX/share/mod/plugins"
if test "$quiet" = "false"; then
	echo "Global ($globalPluginPath):"
fi
loadPlugins "$globalPluginPath"
IFS=":" read -ra paths <<< "$MOD_PLUGIN_PATH"
for p in ${paths[@]}; do
	if test "$quiet" = "false"; then
		echo "Additional ($p):"
	fi
	loadPlugins "$p"
done



# Create precommand (gdb/valgrind/...)
precommand=""
if [ $profile = "true" -o $memcheck = "true" ]; then
	precommand="valgrind --error-exitcode=42"
fi
if [ $profile = "true" ]; then
	precommand="$precommand --tool=callgrind --dump-instr=yes --collect-jumps=yes $vgArgs"
elif [ $memcheck = "true" ]; then
	function checkSuppFile {
		stat $MOD_PREFIX/share/mod/$1 &> /dev/null
		if [ $? -ne 0 ]; then
			echo "Could not find valgrind suppressions file, \"$MOD_PREFIX/share/$1\""
			exit 1
		fi
	}
	checkSuppFile $obabelSupp
	checkSuppFile $pythonSupp
	if [ $debug = "true" ]; then
		precommand="$precommand --vgdb=yes --vgdb-error=0"
	fi
	precommand="$precommand --leak-check=full --track-origins=yes --num-callers=50 --gen-suppressions=all $vgArgs"
	precommand="$precommand --suppressions=$MOD_PREFIX/share/mod/$obabelSupp"
	if [ $pymod = "true" ]; then
		precommand="$precommand --suppressions=$MOD_PREFIX/share/mod/$pythonSupp"
	fi
elif [ $debug = "true" ]; then
	precommand="gdb --args"
fi

# Prepare output folder
if [ -e out ]; then
	if [ -d out ]; then
		# there could be a lot of files in out/
		cd out
		ls | xargs rm -rf
		cd ..
	else
		rm -f out
		mkdir out
	fi
else
	mkdir out
fi

function executeVM {
	if test "$quiet" = "false"; then
		echo "Running Python Interpreter -----------------------------------------"
		time "$@"
	else
		"$@"
	fi
}

function executeVMPython {
	local pyFile="out/input"
	touch $pyFile
	function preamble {
		cat << "EOF"
import ctypes
import os
import sys
sys.setdlopenflags(sys.getdlopenflags() | ctypes.RTLD_GLOBAL)

# Plugins
#--------------------------------------------------------------
EOF
		for plugin in ${plugins[@]}; do
			echo "import $plugin"
			echo "from $plugin import *"
		done

		cat << "EOF"

#--------------------------------------------------------------



mod.includedFiles = set()

def include(fName, checkDup=True, putDup=True, skipDup=True):
	t = fName.rpartition("/")
	if(fName != prefixFilename(fName)):
		if not mod.config.common.quiet:
			print("Executing code from '", fName, "' ('", prefixFilename(fName), "')", sep="")
	else:
		if not mod.config.common.quiet:
			print("Executing code from '", fName, "'", sep="")
	fPrefixed = prefixFilename(fName)
	skip = False
	ino = os.stat(fPrefixed).st_ino
	if checkDup:
		if ino in mod.includedFiles:
			if skipDup:
				skip = True
			else:
				print("Include error (checkDup=", checkDup, ", putDup=", putDup, ", skipDup=", skipDup, "): file '", fPrefixed, "' already included once.", sep="")
				sys.exit(1)
	if putDup:
		mod.includedFiles.add(ino)	
	if t[1] != "":
		pushFilePrefix(t[0] + t[1])
	if skip:
		if not mod.config.common.quiet:
			print("Skipping inclusion (already included)")
	else:
		with open(fPrefixed, 'rb') as f:
			code = compile(f.read(), fName, 'exec')
		exec(code, globals())
	if t[1] != "":
		popFilePrefix()
	if not mod.config.common.quiet:
		if(fName != prefixFilename(fName)):
			print("End of code from '", fName, "' ('", prefixFilename(fName), "')", sep="")
		else:
			print("End of code from '", fName, "'", sep="")
mod.include = include

if "LD_PRELOAD" in os.environ and "valgrind" in os.environ["LD_PRELOAD"]:
	import atexit
	def _valgrindLeakHaxAtExit():
		toRemove = set(globals()) - _initialGlobals
		toRemove.remove("_initialGlobals")
		print("atexit hax to remove global variables for Valgrind leak check:")
		for n in toRemove:
			print("  ", n)
			del globals()[n]
	atexit.register(_valgrindLeakHaxAtExit)
	_initialGlobals = set(globals())
EOF
		if [ ! -z "$MOD_NO_DEPRECATED" ]; then
			echo "config.common.ignoreDeprecation = False"
		fi
	}
	echo '# Preamble' >> $pyFile
	preamble >> $pyFile

	echo '# From command line arguments' >> $pyFile
	if test "$quiet" = "true"; then
		echo "config.common.quiet = True" >> $pyFile
	fi
	while [ $1 ]; do
		case $1 in
			"-f" )
				shift
				echo "include(\"$1\")" >> $pyFile
				shift
				;;
			"-e" )
				shift
				echo "$1" >> $pyFile
				shift
				;;
			"-j" )
				shift
				echo "config.common.numThreads = $1" >> $pyFile
				shift
				;;
			* )
				echo "Unknown argument '$1'"
				exit 1
				;;
		esac
	done
	export PYTHONPATH="$PYTHONPATH:$pySearchPath:$(pwd)"
	echo "# PYTHONPATH=$PYTHONPATH" >> $pyFile
	if test "$quiet" = "false"; then
		echo "Input --------------------------------------------------------------"
		echo "(see $pyFile)"
		echo "Command ------------------------------------------------------------"
	fi
	if [ "x$MOD_PYTHON" = 'x' ]; then
		pythonvm="python3"
	else
		pythonvm="$MOD_PYTHON"
	fi
	if [ "$interactive" = "true" ]; then
		if [ "x$MOD_IPYTHON" = 'x' ]; then
			which ipython3 &> /dev/null
			if test $? -eq 0; then
				pythonvm="ipython3"
			fi
		else
			pythonvm="$MOD_IPYTHON"
		fi
		if test "$quiet" = "false"; then
			echo "$precommand $pythonvm -i $pyFile"
		fi
		executeVM $precommand $pythonvm -i $pyFile
		ret=$?
	else
		if test "$quiet" = "false"; then
			echo "$precommand $pythonvm $pyFile"
		fi
		if [ $debug = "true" ]; then
			executeVM $precommand $pythonvm $pyFile
			ret=${PIPESTATUS[0]}
		else
			executeVM $precommand $pythonvm $pyFile 2>&1 | tee out/log.txt
			ret=${PIPESTATUS[0]}
		fi
	fi
	return $ret
}

if [ $clean = "true" ]; then
	rm -rf out/ summary/
	exit $?
fi
executeVMPython "${args[@]}"
ret=$?

if [ $ret -ne 0 ]; then
	echo "Program failed! Exit code: $ret"
	exit $ret
fi

# Post processing
if [ $post = "true" ]; then
	export MOD_PREFIX
	if test -x $MOD_PREFIX/bin/$summaryMaker; then
		$MOD_PREFIX/bin/$summaryMaker "${summaryArgs[@]}"
		res=$?
	else
		echo "Wrapper script called without --nopost, but mod_post is not installed."
		res=1
	fi
else
	res=0
fi

exit $res
